name: QMake Build Matrix

env:
  BUILD_NUMBER: ${{ github.run_number }}
  HAIQ_BASE_QT6_DEB_PACKAGES: >-
      build-essential qmake6
      libglvnd-dev libtbb-dev
      qt6-tools-dev qt6-tools-dev-tools
      qt6-l10n-tools qt6-documentation-tools
      qt6-base-dev qt6-base-private-dev qt6-base-dev-tools
      qt6-qpa-plugins
      qt6-declarative-dev qt6-declarative-private-dev
      qt6-shadertools-dev
      qt6-gtk-platformtheme libqt6svg6
      qml6-module-qt5compat-graphicaleffects

  HAIQ_BASE_QT6_INSTALLER_MODULES: >-
      qtshadertools qtquicktimeline qt5compat qtwebsockets

on:
  workflow_dispatch:
  push:
    branches:
      - master
    tags:
      - v*

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.runs-on }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - name: "Windows 64bit"
          artifact: "Windows-x64"
          runs-on: windows-2019
          os: windows
          qt_host: 'windows'
          qt_version: '6.4.2'
          qt_arch: 'win64_msvc2019_64'
          qt_dir: "msvc2019_64"
          environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"

        - name: "RaspiOS Bullseye 64bit"
          artifact: "RaspiOS-Bullseye-64"
          runs-on: [self-hosted, linux, ARM64, RPI]
          os: linux
          qt_packages: 'qt6-webengine-dev qt6-multimedia-dev qml6-module-qtqml-workerscript qml6-module-qtwebengine qml6-module-qtmultimedia'
          qmake_extra_config: "CONFIG+=haiq_use_webengine CONFIG+=haiq_use_multimedia"

        - name: "macOS 64bit"
          artifact: "macOS"
          runs-on: macos-11
          os: macos
          qt_host: 'mac'
          qt_version: '6.4.2'
          qt_arch: 'clang_64'
          qt_dir: 'macos'

        - name: "Android ARM"
          artifact: "Android-ARM"
          runs-on: ubuntu-20.04
          os: android
          android_abi: 'armv7'
          android_ndk: '23.2.8568313'
          qt_host: 'linux'
          qt_host_arch: 'gcc_64'
          qt_target: 'android'
          qt_version: '6.4.2'
          qt_arch: 'android_armv7'

  # BUILD
  #################################################

    steps:

    # Get Qt
    #################################################

    - name: Install Qt via aqtinstall
      if: (matrix.config.os != 'linux') || matrix.config.appimage
      shell: sh
      run: |
        python3 -m pip install aqtinstall
        if [ "${{ matrix.config.qt_host_arch }}" != "" ]; then
          python3 -m aqt install-qt -O "${{ runner.workspace }}/Qt/" \
                         ${{ matrix.config.qt_host }} desktop \
                         ${{ matrix.config.qt_version }} ${{ matrix.config.qt_host_arch }} \
                         -m $HAIQ_BASE_QT6_INSTALLER_MODULES ${{ matrix.config.qt_modules }}
        fi
        for arch in ${{ matrix.config.qt_arch }} ${{ matrix.config.qt_extra_archs }}; do
          python3 -m aqt install-qt -O "${{ runner.workspace }}/Qt/" \
                         ${{ matrix.config.qt_host }} ${{ matrix.config.qt_target || 'desktop' }} \
                         ${{ matrix.config.qt_version }} $arch \
                         -m $HAIQ_BASE_QT6_INSTALLER_MODULES ${{ matrix.config.qt_modules }}
        done
        if [ "${{ matrix.config.os }}" = "windows" ]; then
          echo "Qt6_DIR=${{ runner.workspace }}\\Qt\\${{ matrix.config.qt_version }}\\${{ matrix.config.qt_dir || matrix.config.qt_arch }}" >> $GITHUB_ENV
        else
          echo "Qt6_DIR=${{ runner.workspace }}/Qt/${{ matrix.config.qt_version }}/${{ matrix.config.qt_dir || matrix.config.qt_arch }}" >> $GITHUB_ENV
        fi

    - name: Fix broken Windows / ARM64 setup
      if: (matrix.config.qt_arch == 'win64_msvc2019_arm64')
      run: |
        sed -i "s,/Users/qt/work/install/,`echo -E ${Qt6_DIR} | tr '\\' '/'`/../msvc2019_64/," "${Qt6_DIR}/bin/qtpaths.bat"
        sed -i "s,/Users/qt/work/install/,`echo -E ${Qt6_DIR} | tr '\\' '/'`/../msvc2019_64/," "${Qt6_DIR}/bin/qmake.bat"
        ${Qt6_DIR}/bin/qmake.bat -query
      shell: sh

    - name: Install Qt from Linux Distro (container)
      if: (matrix.config.os == 'linux') && matrix.config.debian_container
      run: |
        sudo docker run -v `pwd`:/build --rm --name "debian-build" -d "${{ matrix.config.debian_container }}" sleep 1d
        sudo docker exec -e DEBIAN_FRONTEND=noninteractive "debian-build" apt -y update
        sudo docker exec -e DEBIAN_FRONTEND=noninteractive "debian-build" apt -y install \
            $HAIQ_BASE_QT6_DEB_PACKAGES ${{ matrix.config.qt_packages }} \
            debhelper lsb-release fakeroot build-essential
      shell: bash

    - name: Install Qt from Linux Distro (native)
      if: (matrix.config.os == 'linux') && !matrix.config.debian_container && !matrix.config.appimage
      run: |
        sudo DEBIAN_FRONTEND=noninteractive apt -y update
        sudo DEBIAN_FRONTEND=noninteractive apt -y install \
            $HAIQ_BASE_QT6_DEB_PACKAGES ${{ matrix.config.qt_packages }} \
            debhelper lsb-release fakeroot build-essential
      shell: bash

    # Checkout
    #################################################

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Build for Windows
    #################################################

    - name: Build for Windows
      if: (matrix.config.os == 'windows')
      run: |
        call "${{ matrix.config.environment_script }}"
        call %Qt6_DIR%\bin\qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        nmake
        nmake installer
      shell: cmd

    - name: Upload Windows Installer
      if: (matrix.config.os == 'windows')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.exe"

    # Build for Linux
    #################################################

    - name: Build for Linux (native)
      if: (matrix.config.os == 'linux') && !matrix.config.debian_container && !matrix.config.appimage
      run: |
        qmake6 CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        make package
      shell: bash

    - name: Build for Linux (container)
      if: (matrix.config.os == 'linux') && matrix.config.debian_container && !matrix.config.appimage
      run: |
        sudo docker exec -w /build "debian-build" qmake6 CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        sudo docker exec -w /build "debian-build" make package
      shell: bash

    - name: Upload Linux DEB
      uses: actions/upload-artifact@v2
      if: (matrix.config.os == 'linux') && !matrix.config.appimage
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.deb"

    # Build for Android
    #################################################

    - name: Set Android env vars
      if: (matrix.config.os == 'android')
      run: |
        echo "ANDROID_NDK_ROOT=${ANDROID_SDK_ROOT}/ndk/${{ matrix.config.android_ndk }}" >> $GITHUB_ENV
        echo "ANDROID_BUILD_TOOLS_REVISION=33.0.1" >> $GITHUB_ENV

    - name: Checkout Android openssl
      if: (matrix.config.os == 'android')
      run: |
        cd $ANDROID_SDK_ROOT
        echo "Checking out KDAB's OpenSSL into $ANDROID_SDK_ROOT"
        sudo git clone https://github.com/KDAB/android_openssl.git

    - name: Build for Android
      if: (matrix.config.os == 'android')
      run: |
        echo "Using NDK: $ANDROID_NDK_ROOT"
        echo "QT_HOST_PATH: $(readlink -f $Qt6_DIR/../gcc_64)"
        # fix build-tools 33 (dx missing)
        if [ -e $ANDROID_SDK_ROOT/build-tools/33.0.1 ]; then
          sudo cp -a $ANDROID_SDK_ROOT/build-tools/33.0.1/lib/d8.jar $ANDROID_SDK_ROOT/build-tools/33.0.1/lib/dx.jar
          sudo cp -a $ANDROID_SDK_ROOT/build-tools/33.0.1/d8 $ANDROID_SDK_ROOT/build-tools/33.0.1/dx
        fi
        ${Qt6_DIR}/bin/qmake -spec android-clang CONFIG+=release CONFIG+=qtquickcompiler ${{ matrix.config.qmake_extra_config }}
        make
        make package
      shell: bash

    - name: Upload Android APK on Linux
      uses: actions/upload-artifact@v2
      if: (matrix.config.os == 'android')
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.apk"

    # Build for macOS
    #################################################

    - name: Build for macOS
      if: (matrix.config.os == 'macos')
      run: |
        ${Qt6_DIR}/bin/qmake CONFIG+=release ${{ matrix.config.qmake_extra_config }}
        make
        make installer
      shell: bash

    - name: Upload DMG for macOS
      uses: actions/upload-artifact@v2
      if: (matrix.config.os == 'macos')
      with:
        name: ${{ matrix.config.artifact }}
        path: "*.dmg"

  # RELEASE
  #################################################

  release:
    needs: [ build ]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Download Artifacts to Release
      uses: actions/download-artifact@v2
      with:
        path: 'artifacts'

    - name: Rename Artifacts
      run: |
        find artifacts -mindepth 2 -type f -print0 | while read -d $'\0' a; do
          d="$(dirname $a)"
          mv "$a" "${d}-$(basename $a)"
          rm -rf "$d"
        done
        echo "Artifacts after flattening:"
        find artifacts
      shell: bash

    - name: Release
      uses: docker://antonyurchenko/git-release:latest
      # uses: rgriebl/git-release@testing
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        ALLOW_EMPTY_CHANGELOG: "true"
      with:
        args: artifacts/*
